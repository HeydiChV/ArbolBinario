class NodoArbol {
    int valor;
    NodoArbol izquierdo;
    NodoArbol derecho;

    public NodoArbol(int valor) {
        this.valor = valor;
        izquierdo = null;
        derecho = null;
    }
}

class ArbolBinario {
    NodoArbol raiz;

    public ArbolBinario() {
        raiz = null;
    }
    // Método para insertar un valor en el árbol
    public void insertar(int valor) {
        raiz = insertarRec(raiz, valor);
    }
    private NodoArbol insertarRec(NodoArbol raiz, int valor) {
        if (raiz == null) {
            raiz = new NodoArbol(valor);
            return raiz;
        }
        if (valor < raiz.valor) {
            raiz.izquierdo = insertarRec(raiz.izquierdo, valor);
        } else if (valor > raiz.valor) {
            raiz.derecho = insertarRec(raiz.derecho, valor);
        }
        return raiz;
    }
    // Método para realizar un recorrido inorden del árbol
    public void inorden() {
        inordenRec(raiz);
    }
    private void inordenRec(NodoArbol raiz) {
        if (raiz != null) {
            inordenRec(raiz.izquierdo);
            System.out.print(raiz.valor + " ");
            inordenRec(raiz.derecho);
        }
    }
    public void postorden() {
        postordenRec(raiz);
    }
    private void postordenRec(NodoArbol raiz) {
        if (raiz != null) {
            postordenRec(raiz.izquierdo);
            postordenRec(raiz.derecho);
            System.out.print(raiz.valor + " ");
        }
    }
    public void preorden() {
        preordenRec(raiz);
    }
    private void preordenRec(NodoArbol raiz) {
        if (raiz != null) {
            System.out.print(raiz.valor + " ");
            preordenRec(raiz.izquierdo);
            preordenRec(raiz.derecho);
        }
    }
    // Método principal
    public static void main(String[] args) {
        ArbolBinario arbol = new ArbolBinario();
        arbol.insertar(46);
        arbol.insertar(24);
        arbol.insertar(3);
        arbol.insertar(15);
        arbol.insertar(39);
        arbol.insertar(8);
        arbol.insertar(33);
        arbol.insertar(14);
        arbol.insertar(25);
        arbol.insertar(9);
        arbol.insertar(4);
        arbol.insertar(31);
        arbol.insertar(36);
        arbol.insertar(18);
        arbol.insertar(42);
        arbol.insertar(22);
        arbol.insertar(11);
        arbol.insertar(28);
        arbol.insertar(7);
        arbol.insertar(48);

        System.out.println("Recorrido inorden del árbol:");
        arbol.inorden();
        System.out.println("\nRecorrido preorden del árbol:");
        arbol.preorden();
        System.out.println("\nRecorrido postorden del árbol:");
        arbol.postorden();

        System.out.println("\n====================================");
        System.out.println("==ESTUDIANTE: Heydi Chaiña Velasquez==");
        System.out.println("====================================");
    }
}
